"""
    Name : DAMPP
    
    Version : 2.1
    
    Author : Sehan Weerasekara (S3H4N)
    
    Date : 19.01.2022
    
    Description : Script to install and run apache, mysql, phpmyadmin in docker containers.
    
    Last Update : 24.01.2022
    
    Changelog : Rewrote setup file using Python.
    
    URL : https://github.com/s3h4n/dampp.git

"""

import sys
import os

docker_v = "3.3"
php_img = "php:8.1.1-apache"
mysql_img = "mysql:latest"
pma_img = "phpmyadmin:latest"


def show_banner():
    print(f"      ____    _    __  __ ____  ____       ")
    print(f"     |  _ \  / \  |  \/  |  _ \|  _ \      ")
    print(f"     | | | |/ _ \ | |\/| | |_) | |_) |     ")
    print(f"     | |_| / ___ \| |  | |  __/|  __/      ")
    print(f"     |____/_/   \_\_|  |_|_|   |_|    v2.1 ")
    print(f"\nDAMPP : Dockerized Apache MySQL Php PhpMyAdmin\n")


def add_dockerfile(line=""):
    with open(f"./{project}/Dockerfile", "w") as f:
        line += f"# Auto generated by DAMPP.\n# Do not remove.\n\n"
        line += f"FROM {php_img}\n"
        line += f"RUN apt-get update && apt-get upgrade -y\n"
        line += f"RUN docker-php-ext-install mysqli\n"
        line += f"EXPOSE 80\n"

        f.writelines(line)


def add_dockercompose(line="", t=" "):
    with open(f"./{project}/docker-compose.yml", "w") as f:
        line += f"# Auto generated by DAMPP.\n# Do not remove.\n"
        line += f"\nversion: '{docker_v}'\n"
        line += f"\nservices:\n"
        line += f"\n{t*2}web:\n"
        line += f"{t*4}build:\n"
        line += f"{t*6}context: ./web\n"
        line += f"{t*6}dockerfile: ../Dockerfile\n"
        line += f"{t*4}container_name: dampp-{project}-php\n"
        line += f"{t*4}depends_on:\n"
        line += f"{t*6}- db\n"
        line += f"{t*4}volumes:\n"
        line += f"{t*6}- ./web:/var/www/html\n"
        line += f"{t*4}ports:\n"
        line += f"{t*6}- {php_port}:80\n"
        line += f"\n{t*2}db:\n"
        line += f"{t*4}container_name: dampp-{project}-mysql\n"
        line += f"{t*4}image: {mysql_img}\n"
        line += f"{t*4}command: --default-authentication-plugin=mysql_native_password\n"
        line += f"{t*4}restart: always\n"
        line += f"{t*4}environment:\n"
        line += f"{t*6}MYSQL_ROOT_PASSWORD: {root_psswd}\n"
        line += f"{t*6}MYSQL_DATABASE: {db}\n"
        line += f"{t*6}MYSQL_USER: {user}\n"
        line += f"{t*6}MYSQL_PASSWORD: {psswd}\n"
        line += f"{t*4}ports:\n"
        line += f"{t*6}- 3306:{mysql_port}\n"
        line += f"\n{t*2}phpmyadmin:\n"
        line += f"{t*4}container_name: dampp-{project}-pma\n"
        line += f"{t*4}image: {pma_img}\n"
        line += f"{t*4}depends_on:\n"
        line += f"{t*6}- db\n"
        line += f"{t*4}restart: always\n"
        line += f"{t*4}ports:\n"
        line += f"{t*6}- {pma_port}:80\n"
        line += f"{t*4}environment:\n"
        line += f"{t*6}- PMA_ARBITRARY=1\n"

        f.writelines(line)


def add_sample_site(line=""):
    with open(f"{project}/web/index.php", "w") as f:
        line = "<!DOCTYPE html><html lang=en><title>DAMP</title><meta charset=utf-8><meta content='width = device-width, initial-scale = 1, shrink-to-fit = no'name=viewport><style>body{font-family:Ubuntu,sans-serif}div{padding:.5rem}a{text-decoration:none}code{color:#ff1493;font-weight:700}.center{background-color:#fff;box-shadow:0 4px 8px 0 rgba(0,0,0,.2);transition:.3s;border-radius:12.5px;padding:2rem;margin:0;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);text-align:center}.center:hover{box-shadow:0 8px 16px 0 rgba(0,0,0,.2)}.btn{padding:10px 35.5px 10px 35.5px;margin-top:15px;color:#fff;background-color:#dc143c;border:0;border-radius:30px;font-size:2.4vh;font-weight:700}.btn:hover{background-color:#000;color:#fff;font-weight:700}.tracking-in-contract{-webkit-animation:tracking-in-contract .8s cubic-bezier(.215,.61,.355,1) both;animation:tracking-in-contract .8s cubic-bezier(.215,.61,.355,1) both}@-webkit-keyframes tracking-in-contract{0%{letter-spacing:1em;opacity:0}40%{opacity:.6}100%{letter-spacing:normal;opacity:1}}@keframes tracking-in-contract{0%{letter-spacing:1em;opacity:0}40%{opacity:.6}100%{letter-spacing:normal;opacity:1}}</style><div class=center><span class=tracking-in-contract><a href=https://github.com/s3h4n/dampp.git target=_blank><h1 style=color:#dc143c>DAMP</h1></a><h3>Dockerized Apache MySQL PHP</h3></span><hr><div><p>Customize <code>your-app/web/index.php</code> to see the changes.</div><hr><div><button class=btn onclick=open_php_my_admin() type=button>PhpMyAdmin</button></div></div><script defer>const open_php_my_admin = () => { window.open('http://localhost:8080/', '_blank');;};</script></body></html>"

        f.write(line)


def get_inp():
    global project, db, user, psswd, root_psswd, php_port, mysql_port, pma_port

    print("\n === PROJECT DETAILS ======================\n")

    project = input(" Project Name \t(Default: my-app)\t:: ") or "my-app"

    print("\n\n === MySQL CREDENTIALS ====================\n")

    db = input(" Database Name \t(Default: test)\t\t:: ") or "test"
    user = input(" Username \t(Default: admin)\t:: ") or "admin"
    psswd = input(" Password \t(Default: pass)\t\t:: ") or "pass"
    root_psswd = input(" Root Password \t(Default: root)\t\t:: ") or "root"

    print("\n\n === PORTS ================================\n")

    try:
        php_port = int(input(" PHP \t\t(Default: 8000)\t\t:: ") or "8000")
        if ((php_port <= 0) or (php_port > 65535)):
            exit()
    except:
        print("\n Invalid port number. Process aborted.")
        sys.exit()

    try:
        mysql_port = int(
            input(" MySQL \t\t(Default: 6033)\t\t:: ") or "6033")
        if ((mysql_port <= 0) or (mysql_port > 65535) or (mysql_port == php_port)):
            exit()
    except:
        print("\n Invalid port number. Process aborted.")
        sys.exit()

    try:
        pma_port = int(
            input(" PhpMyAdmin \t(Default: 8080)\t\t:: ") or "8080")
        if ((pma_port <= 0) or (pma_port > 65535) or (pma_port == php_port) or (pma_port == mysql_port)):
            exit()
    except:
        print("\n Invalid port number. Process aborted.")
        sys.exit()

    return 0


def install():

    show_banner()

    if (get_inp() == 0):

        try:
            os.mkdir(f"{project}")
        except FileExistsError:
            print(f" \n{project} already exists.")
            sys.exit()
        except Exception:
            print(f"\n An error occured while creating {project}.")
            sys.exit()

        try:
            os.mkdir(f" {project}/web")
        except FileExistsError:
            print(f"\n {project}/web already exists.")
            sys.exit()
        except Exception:
            print(f"\n An error occured while creating {project}/web.")
            sys.exit()

        try:
            add_dockerfile()
        except:
            print(f"\n An error occured while creating {project}/Dockerfile.")
            sys.exit()

        try:
            add_dockercompose()
        except:
            print(
                f"\n An error occured while creating {project}/docker-compose.yml")
            sys.exit()

        try:
            add_sample_site()
        except:
            print(
                f"\n An error occured while creating {project}/web/index.php")
            sys.exit()

        try:
            os.chdir(f"{project}")
        except:
            sys.exit()

        try:
            os.system(
                "echo && wget https://raw.githubusercontent.com/s3h4n/dampp/main/resources/dampp")
        except:
            sys.exit()

        try:
            os.system(
                "echo && docker-compose build && docker-compose up -d && docker-compose stop && chmod +x dampp")
        except:
            sys.exit()

        print(f"\n DAMPP has been successfully installed in {project}")
        print(f"\n Run 'cd {project} && ./dampp up' and see the magic!")


install()
